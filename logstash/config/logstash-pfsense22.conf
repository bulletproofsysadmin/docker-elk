input {
    udp {
        type => syslog
        port => 9514
    }
}


# Use this filter with pattern file https://gist.github.com/elijahpaul/f5f32d4e914dcb7fedd2
filter {  
   if [type] == "syslog" {
      mutate {
        add_tag => ["PFSense", "Ready"]
      }
    }

  if "PFSense" in [tags] {
    grok {
      add_tag => [ "firewall" ]
      match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
    }
    mutate {
      gsub => ["datetime","  "," "]
    }
    date {
      match => [ "datetime", "MMM dd HH:mm:ss" ]
    }
    mutate {
      replace => [ "message", "%{msg}" ]
    }
    mutate {
      remove_field => [ "msg", "datetime" ]
    }
}
if [prog] =~ /^filterlog$/ {  
    mutate {
      remove_field => [ "msg", "datetime" ]      
    }
    grok {
      patterns_dir => "./patterns"
      match => [ "message", "%{LOG_DATA}%{IP_SPECIFIC_DATA}%{IP_DATA}%{PROTOCOL_DATA}" ]
    }
    mutate {
      lowercase => [ 'proto' ]
    }
    geoip {
      add_tag => [ "GeoIP" ]
      source => "src_ip"
    }
  }

    if [program] =~ /^pf$/ {
      mutate {
        add_tag => [ "packetfilter" ]
      }
      multiline {
        pattern => "^\s+|^\t\s+"
        what => "previous"
      }
      mutate {
        gsub => ['message', "\n", " "]
      }
      grok {
        match => [
          "message", "rule %{NOTSPACE:rule}\(.*\): %{WORD:action} .* on %{NOTSPACE:iface}: .* proto %{WORD:proto}%{GREEDYDATA}%{IP:src_ip}\.%{INT:src_port} [<|>] %{IP:dst_ip}\.%{INT:dst_port}: %{GREEDYDATA}",
          "message", "%{GREEDYDATA}"
        ]
      }
      mutate {
        remove_field => [ "pfsense_message" ]
      }
    }
    if [program] =~ /^dhcpd$/ {
      if [message] =~ /^DHCPACK|^DHCPREQUEST|^DHCPOFFER/ {
        grok {
          match => [ "message", "(?<action>.*) (on|for|to) (?<src_ip>[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]\.[0-2]?[0-9]?[0-9]) .*(?<mac_address>[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]).* via (?<iface>.*)" ]
        }
      }
      if [message] =~ /^DHCPDISCOVER/ {
        grok {
          match => [ "message", "(?<action>.*) from (?<mac_address>[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]).* via (?<iface>.*)" ]
        }
      }
      if [message] =~ /^DHCPINFORM/ {
        grok {
          match => [ "message", "(?<action>.*) from (?<src_ip>.*).* via (?<iface>.*)" ]
        }
      }
    }
    if [program] == "suricata" {
      mutate {
        add_tag => [ "suricata" ]
      }
    }
    if [program] == "snort" {
      mutate {
        add_tag => [ "snort" ]
      }
    }
    mutate {
      replace => [ "host", "%{logsource}" ]
      add_tag => [ "pre-processed" ]
      remove_field => [ "logsource", "pfsense_message", "syslog_host_id" ]
    }
  }
}

filter {
  if "snort" in [tags] {
    if "PFSense" in [tags] {
      grok {
        match => [
          "orig_message", "snort\[%{INT:snort_pid}\]\:.*\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids
_priority}].*{%{WORD:ids_proto}}.*%{IP:src_ip}:%{INT:src_port} \-\>.*%{IP:dst_ip}:%{INT:dst_port}",
          "orig_message", "snort\[%{INT:snort_pid}\]\:.*\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids
_priority}].*\{PROTO:%{WORD:ids_proto}.*%{IP:src_ip} \-\>.*%{IP:dst_ip}"
        ]
      }
      grok {
        match => [
          "orig_message", "snort\[%{INT}\]\:.\[%{DATA:ids_signature}:%{INT}].%{GREEDYDATA}"
        ]
      }
    }
    if "PFsense" not in [tags] and [type] == "snort" {
      grok {
        match => [
          "message", "%{DATESTAMP:timestamp}.*\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids_priority}
].*{%{WORD:ids_proto}}.*%{IP:src_ip}:%{INT:src_port} \-\>.*%{IP:dst_ip}:%{INT:dst_port}",
          "message", "%{DATESTAMP:timestamp}.*\[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\].%{GREEDYDATA:ids_alert}.\[Classification\: %{DATA:ids_classification}\].*\[Priority\: %{INT:ids_priority}
].*\{PROTO:%{WORD:ids_proto}.*%{IP:src_ip} \-\>.*%{IP:dst_ip}"
        ]
      }
      grok {
        match => [
          "message", "%{DATESTAMP}.*\[%{DATA:ids_signature}:%{INT}].%{GREEDYDATA}"
        ]
      }
    }
    translate {
      field => "ids_priority"
      destination => "ids_priority_full"
      dictionary => [
        "1", "High",
        "2", "Medium",
        "3", "Low"
      ]
    }
    geoip {
      source => "src_ip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
    if [ids_signature] {
      if [ids_alert] =~ /^GPL/ {
        mutate {
          add_tag => [ "Snort-ET-sig" ]
          add_field => [ "ids_rule_type", "Emerging Threats" ]
        }
      }
      if [ids_alert] =~ /^ET/ {
        mutate {
          add_tag => [ "Snort-ET-sig" ]
          add_field => [ "ids_rule_type", "Emerging Threats" ]
        }
      }
      if "Snort-ET-sig" not in [tags] {
        mutate {
          add_tag => [ "Snort-sig" ]
          add_field => [ "ids_rule_type", "Snort" ]
        }
      }
    }
    if "Snort-sig" in [tags] {
      if [ids_gid] == "1" {
        mutate {
          add_field => [ "Signature_Info", "http://rootedyour.com/snortsid?sid=%{ids_sid}" ]
        }
      }
      if [ids_gid] != "1" {
        mutate {
          add_field => [ "Signature_Info", "http://rootedyour.com/snortsid?sid=%{ids_gid}-%{ids_sid}" ]
        }
      }
    }
    if "Snort-ET-sig" in [tags] {
      mutate {
        add_field => [ "Signature_Info", "http://doc.emergingthreats.net/bin/view/Main/%{ids_sid}" ]
      }
    }
  }
}


output {
  elasticsearch { }
}
