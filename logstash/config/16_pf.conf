filter {
    # Previous filter names and groups sending devices
    if [type] == "pfsyslog" {
       mutate {
        add_tag => ["PFSense", "Ready"]
      }
       grok {
           match => [ 'message', '.*%{SYSLOGTIMESTAMP:timestamp} %{WORD:program}%{GREEDYDATA:rest}' ]
        }

        if [program] == "filterlog" {
            # Grab fields up to IP version. The rest will vary depending on IP version.
            grok {
                match => [ 'rest', '\: %{INT:rule_number},%{INT:sub_rule_number},,%{INT:tracker_id},%{WORD:interface},%{WORD:reason},%{WORD:action},%{WORD:direction},%{WORD:ip_version},%{GREEDYDATA:rest2}' ]
            }

			if [ip_version] == "4" {
				# IPv4. Grab field up to dest_ip. Rest can vary.
				grok {
					match => [ 'rest2', '%{WORD:tos},.*,%{INT:ttl},%{INT:id},%{INT:offset},%{WORD:flags},%{INT:protocol_id},%{WORD:protocol},%{INT:length},%{IP:src_ip},%{IP:dest_ip},%{GREEDYDATA:rest3}' ]
				}
			}

			if [protocol_id] != 2 {
				# Non-IGMP has more fields.
				grok {
					match => [ 'rest3', '^%{INT:src_port:int},%{INT:dest_port:int}' ]
				}
			}

			else {
				# IPv6. Grab field up to dest_ip. Rest can vary.
				grok {
					match => [ 'rest2', '%{WORD:class},%{WORD:flow_label},%{INT:hop_limit},%{WORD:protocol},%{INT:protocol_id},%{INT:length},%{IPV6:src_ip},%{IPV6:dest_ip},%{GREEDYDATA:rest3}' ]
				}
			}

			if [rest3] {
				# Non-ICMP has more fields
				grok {
					match => [ 'rest3', '^%{INT:src_port:int},%{INT:dest_port:int},%{INT:data_length}' ]
				}
			}

			mutate {
				remove_field => [ 'message' ]
				remove_field => [ 'rest' ]
				remove_field => [ 'rest2' ]
				remove_field => [ 'rest3' ]
				remove_tag => [ '_grokparsefailure' ]
				add_tag => [ 'packetfilter' ]
			}
		}
##YAY! now the Snort Alerts
		if [program] == "suricata" {
			grok {
			#grab everything up to IDS Alert type - portscans throw things off
				match => [
					"rest", "\[%{INT:ids_signature}\]\: \[%{INT:ids_gid}\:%{INT:ids_sid}\:%{INT:ids_rev}\] \(%{WORD:ids_alert_type}\) %{GREEDYDATA:rest4}"]
			}

			#Portscans use multiple ports and protocols
			if [ids_alert_type] == "portscan" {
				mutate {
                                        add_tag => [ 'portscan' ]
                                }	

			grok {
					match => [
						"rest4", "%{DATA:ids_alert}.\[C.*\: %{DATA:ids_classification}\] \[.*\: %{INT:ids_priority}\] \{.*\:%{INT:protocol}\} %{IP:src_ip} \-\> %{IP:dest_ip}"]
				}
			}

			#The rest of the suricata data should have port and protocols
			if [ids_alert_type] != "portscan" {
			
				mutate {
					add_tag => [ 'alert' ]
				}
				grok {
					match => [
						"rest4", "%{DATA:ids_alert}.\[C.*\: %{DATA:ids_classification}\] \[.*\: %{INT:ids_priority}\] \{%{WORD:protocol}\} %{IP:src_ip}\:%{INT:src_port} \-\> %{IP:dest_ip}\:%{INT:dest_port}"]
				}
			}

			mutate {
				remove_field => [ 'message' ]
				remove_field => [ 'rest' ]
				remove_tag => [ '_grokparsefailure' ]
				add_tag => [ 'suricata_ids' ]
				add_field => {
					"src_ip" => "%{src_ip}"
				}
			}
		}



		geoip {
				add_tag => [ "GeoIP" ]
				source => "src_ip"
				database => "/etc/logstash/GeoLiteCity.dat"

		}

	}
}
